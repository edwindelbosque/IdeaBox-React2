{"version":3,"sources":["Form.js","Card.js","Ideas.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleChange","event","setState","target","name","value","handleClick","preventDefault","newIdea","title","state","description","id","Date","now","submitIdea","type","placeholder","this","onChange","onClick","Component","Card","deleteIdea","Ideas","ideas","map","idea","key","App","createIdea","filteredIdeas","filter","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2WA2DeA,G,kBAvDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAVnB,EAcnBC,YAAc,SAACL,GACbA,EAAMM,iBACN,IAAMC,EAAU,CACdC,MAAO,EAAKC,MAAMD,MAClBE,YAAa,EAAKD,MAAMC,YACxBC,GAAIC,KAAKC,OAGX,EAAKf,MAAMgB,WAAWP,GACtB,EAAKN,SAAS,CACZO,MAAO,GACPE,YAAa,MAvBf,EAAKD,MAAQ,CACXD,MAAO,GACPE,YAAa,IAJE,E,sEA8BjB,OACE,8BACE,2BACEK,KAAK,OACLC,YAAY,QACZb,KAAK,QACLC,MAAOa,KAAKR,MAAMD,MAClBU,SAAUD,KAAKlB,eAEjB,2BACEgB,KAAK,OACLC,YAAY,cACZb,KAAK,cACLC,MAAOa,KAAKR,MAAMC,YAClBQ,SAAUD,KAAKlB,eAEjB,4BACEoB,QAASF,KAAKZ,aADhB,oB,GA/CWe,cCaJC,G,YAbF,SAAC,GAA4C,IAA1Cb,EAAyC,EAAzCA,MAAOE,EAAkC,EAAlCA,YAAaY,EAAqB,EAArBA,WAAYX,EAAS,EAATA,GAE9C,OACE,iCACE,4BAAKH,GACL,2BAAIE,GACJ,4BAAQS,QAAS,kBAAMG,EAAWX,KAAlC,aCcSY,EAnBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOF,EAAiB,EAAjBA,WAEtB,OACE,8BACGE,EAAMC,KAAI,SAAAC,GACT,OACE,kBAAC,EAAD,CACElB,MAAOkB,EAAKlB,MACZE,YAAagB,EAAKhB,YAClBC,GAAIe,EAAKf,GACTgB,IAAKD,EAAKf,GACVW,WAAYA,SCwBTM,E,YAjCb,WAAY9B,GAAQ,IAAD,8BACjB,4CAAMA,KAMR+B,WAAa,SAACtB,GACZ,EAAKN,SAAS,CACZuB,MAAM,GAAD,mBAAM,EAAKf,MAAMe,OAAjB,CAAwBjB,OATd,EAanBe,WAAa,SAACX,GACZ,IAAMmB,EAAgB,EAAKrB,MAAMe,MAAMO,QAAO,SAAAL,GAAI,OAAIA,EAAKf,KAAOA,KAClE,EAAKV,SAAS,CACZuB,MAAOM,KAdT,EAAKrB,MAAQ,CACXe,MAAO,IAHQ,E,sEAqBjB,OACE,yBAAKQ,UAAU,YACb,uCACA,kBAAC,EAAD,CAAMlB,WAAYG,KAAKY,aACvB,kBAAC,EAAD,CAAOL,MAAOP,KAAKR,MAAMe,MAAOF,WAAYL,KAAKK,kB,GA1BvCF,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b02f2169.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Form.css';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: '',\n      description: ''\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    const newIdea = {\n      title: this.state.title,\n      description: this.state.description,\n      id: Date.now()\n    }\n\n    this.props.submitIdea(newIdea);\n    this.setState({\n      title: '',\n      description: ''\n    })\n  }\n\n  render() {\n    return (\n      <form>\n        <input\n          type='text'\n          placeholder='Title'\n          name='title'\n          value={this.state.title}\n          onChange={this.handleChange}\n        />\n        <input\n          type='text'\n          placeholder='Description'\n          name='description'\n          value={this.state.description}\n          onChange={this.handleChange}\n        />\n        <button\n          onClick={this.handleClick}>\n          Create Idea\n        </button>\n      </form>\n    )\n  }\n}\n\nexport default Form;","import React from 'react';\nimport './Card.css';\n\nconst Card = ({ title, description, deleteIdea, id }) => {\n\n  return (\n    <article>\n      <h1>{title}</h1>\n      <p>{description}</p>\n      <button onClick={() => deleteIdea(id)}>\n        DELETE\n      </button>\n    </article>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport './Ideas.css';\nimport Card from './Card';\n\nconst Ideas = ({ ideas, deleteIdea }) => {\n\n  return (\n    <main>\n      {ideas.map(idea => {\n        return (\n          <Card\n            title={idea.title}\n            description={idea.description}\n            id={idea.id}\n            key={idea.id}\n            deleteIdea={deleteIdea}\n          />\n        )\n      })}\n    </main>\n  );\n}\n\nexport default Ideas;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Ideas from './Ideas';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ideas: []\n    }\n  }\n\n  createIdea = (newIdea) => {\n    this.setState({\n      ideas: [...this.state.ideas, newIdea]\n    })\n  }\n\n  deleteIdea = (id) => {\n    const filteredIdeas = this.state.ideas.filter(idea => idea.id !== id)\n    this.setState({\n      ideas: filteredIdeas\n    })\n  }\n\n  render() {\n    return (\n      <div className='main-app'>\n        <h1>IdeaBox</h1>\n        <Form submitIdea={this.createIdea} />\n        <Ideas ideas={this.state.ideas} deleteIdea={this.deleteIdea} />\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}